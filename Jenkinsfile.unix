/*
* Copyright © 2010 - 2013 Apama Ltd.
* Copyright © 2013 - 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.                                                            
*
ant -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME}_${env.BUILD_DATE}_${env.BUILD_NUMBER} -DbuildNumber=${env.BUILD_NUMBER} build
*/
abcs = ['a', 'b', 'c']
pipeline {
    agent any
    environment { 
        def BUILD_DATE = sh(script: "date +'%d%m%y'", returnStdout: true).trim()
        COMMAND="ant -DprojectName=${env.JOB_NAME}_${env.BUILD_DATE}_${env.BUILD_NUMBER} -DbuildNumber=${env.BUILD_NUMBER}"
    }

	

    stages {
    	stage('Declsssarative: Checkout SCM') {
    		steps {
    			echo "Hello Sudarshan"
    			echo "Hello Sudarshan"
    		}
    	}
    	stage('DependencyCheck'){
		steps {
		
		script {
		
		
		 	echo "${currentBuild.buildCauses}" 
			ret = sh(script: 'git fetch --no-tags')
			println(ret)
			    if(ret == 0){
				println("Its 0 man")
			   }else{
				println("Its not 0 man")
			   }
			
			def inside=false		
			def data = readFile(file: 'assets/IS/Packages/PackageA/manifest.v3')	
			def lines = data.readLines()
			 for (line in lines) {  
			 	if(line.contains("record name=\"requires\"") || inside) {
			 		if(line.contains("</record>")) {
			 			inside=false
			 			break
			 		}
			 		if(!inside) {
			 			inside=true
			 			continue
			 		}
			 		String[] str;
      					str = line.split('"');
			 		println(str[1])
			 		build(job: str[1],parameters: [])
			 		println("Done with buivvvld")
			 	}
			 }
			}
		}	
    	}
        stage('Build'){
            steps {
                sh "${COMMAND} build"
            }
        }
        stage('Deploy') {
            steps {
                sh "${COMMAND} deploy"
            }
        }
    }
    

}

@NonCPS // has to be NonCPS or the build breaks on the call to .each
def echo_all(list) {
    list.each { item ->
        echo "Hello ${item}"
    }
}

List<String> readFileInList(String filePath) {
    File file = new File(filePath)
    def lines = file.readLines()
    return lines
}
